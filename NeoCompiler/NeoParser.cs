//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g 2015-02-19 15:22:05

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class NeoParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ASSIGNMENT", "COMMENT", "DECLARATION", "FILE", "FLOAT_VALUE", "FUNCTION_ARGUMENT", "FUNCTION_ARGUMENTS", "FUNCTION_BODY", "FUNCTION_CALL", "FUNCTION_DEF", "FUNCTION_DEFS", "ID", "INT_VALUE", "LITERAL", "PARAM", "PARAMS", "PARENEXP", "PROGRAM", "SCRIPT", "TYPE_FLOAT", "TYPE_INT", "UNARY", "VARIABLE", "WS", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'='", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int ASSIGNMENT=4;
	public const int COMMENT=5;
	public const int DECLARATION=6;
	public const int FILE=7;
	public const int FLOAT_VALUE=8;
	public const int FUNCTION_ARGUMENT=9;
	public const int FUNCTION_ARGUMENTS=10;
	public const int FUNCTION_BODY=11;
	public const int FUNCTION_CALL=12;
	public const int FUNCTION_DEF=13;
	public const int FUNCTION_DEFS=14;
	public const int ID=15;
	public const int INT_VALUE=16;
	public const int LITERAL=17;
	public const int PARAM=18;
	public const int PARAMS=19;
	public const int PARENEXP=20;
	public const int PROGRAM=21;
	public const int SCRIPT=22;
	public const int TYPE_FLOAT=23;
	public const int TYPE_INT=24;
	public const int UNARY=25;
	public const int VARIABLE=26;
	public const int WS=27;

	public NeoParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public NeoParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return NeoParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g"; } }


	public AstParserRuleReturnScope<CommonTree, CommonToken> Process() {
		//TreeAdaptor = new CommonTreeAdaptor();
		return file();
	}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_file();
	partial void LeaveRule_file();

	// $ANTLR start "file"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:39:1: file : script -> ^( FILE script ) ;
	[GrammarRule("file")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> file()
	{
		EnterRule_file();
		EnterRule("file", 1);
		TraceIn("file", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> script1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_script=new RewriteRuleSubtreeStream(adaptor,"rule script");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(39, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:40:2: ( script -> ^( FILE script ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:40:4: script
			{
			DebugLocation(40, 4);
			PushFollow(Follow._script_in_file128);
			script1=script();
			PopFollow();

			stream_script.Add(script1.Tree);


			{
			// AST REWRITE
			// elements: script
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 40:11: -> ^( FILE script )
			{
				DebugLocation(40, 14);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:40:14: ^( FILE script )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(40, 16);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE, "FILE"), root_1);

				DebugLocation(40, 21);
				adaptor.AddChild(root_1, stream_script.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 1);
			LeaveRule("file", 1);
			LeaveRule_file();
		}
		DebugLocation(41, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"

	partial void EnterRule_script();
	partial void LeaveRule_script();

	// $ANTLR start "script"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:43:1: script : ( functionDefs )? ( program )? -> ^( SCRIPT ( functionDefs )? ( program )? ) ;
	[GrammarRule("script")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> script()
	{
		EnterRule_script();
		EnterRule("script", 2);
		TraceIn("script", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> functionDefs2 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> program3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_functionDefs=new RewriteRuleSubtreeStream(adaptor,"rule functionDefs");
		RewriteRuleSubtreeStream stream_program=new RewriteRuleSubtreeStream(adaptor,"rule program");
		try { DebugEnterRule(GrammarFileName, "script");
		DebugLocation(43, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:43:8: ( ( functionDefs )? ( program )? -> ^( SCRIPT ( functionDefs )? ( program )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:43:10: ( functionDefs )? ( program )?
			{
			DebugLocation(43, 10);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:43:10: ( functionDefs )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0==ID))
			{
				int LA1_1 = input.LA(2);

				if ((LA1_1==28))
				{
					int LA1_3 = input.LA(3);

					if ((LA1_3==ID))
					{
						int LA1_4 = input.LA(4);

						if ((LA1_4==ID))
						{
							alt1 = 1;
						}
					}
					else if ((LA1_3==29))
					{
						int LA1_5 = input.LA(4);

						if ((LA1_5==37))
						{
							alt1 = 1;
						}
					}
				}
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:43:10: functionDefs
				{
				DebugLocation(43, 10);
				PushFollow(Follow._functionDefs_in_script147);
				functionDefs2=functionDefs();
				PopFollow();

				stream_functionDefs.Add(functionDefs2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(43, 24);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:43:24: ( program )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==ID))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:43:24: program
				{
				DebugLocation(43, 24);
				PushFollow(Follow._program_in_script150);
				program3=program();
				PopFollow();

				stream_program.Add(program3.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }



			{
			// AST REWRITE
			// elements: program, functionDefs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 43:33: -> ^( SCRIPT ( functionDefs )? ( program )? )
			{
				DebugLocation(43, 36);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:43:36: ^( SCRIPT ( functionDefs )? ( program )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(43, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SCRIPT, "SCRIPT"), root_1);

				DebugLocation(43, 45);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:43:45: ( functionDefs )?
				if (stream_functionDefs.HasNext)
				{
					DebugLocation(43, 45);
					adaptor.AddChild(root_1, stream_functionDefs.NextTree());

				}
				stream_functionDefs.Reset();
				DebugLocation(43, 59);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:43:59: ( program )?
				if (stream_program.HasNext)
				{
					DebugLocation(43, 59);
					adaptor.AddChild(root_1, stream_program.NextTree());

				}
				stream_program.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("script", 2);
			LeaveRule("script", 2);
			LeaveRule_script();
		}
		DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "script"); }
		return retval;

	}
	// $ANTLR end "script"

	partial void EnterRule_functionDefs();
	partial void LeaveRule_functionDefs();

	// $ANTLR start "functionDefs"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:46:1: functionDefs : ( functionDef )+ -> ^( FUNCTION_DEFS ( functionDef )+ ) ;
	[GrammarRule("functionDefs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> functionDefs()
	{
		EnterRule_functionDefs();
		EnterRule("functionDefs", 3);
		TraceIn("functionDefs", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> functionDef4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_functionDef=new RewriteRuleSubtreeStream(adaptor,"rule functionDef");
		try { DebugEnterRule(GrammarFileName, "functionDefs");
		DebugLocation(46, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:47:2: ( ( functionDef )+ -> ^( FUNCTION_DEFS ( functionDef )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:47:4: ( functionDef )+
			{
			DebugLocation(47, 4);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:47:4: ( functionDef )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==ID))
				{
					int LA3_1 = input.LA(2);

					if ((LA3_1==28))
					{
						int LA3_3 = input.LA(3);

						if ((LA3_3==ID))
						{
							int LA3_4 = input.LA(4);

							if ((LA3_4==ID))
							{
								alt3 = 1;
							}


						}
						else if ((LA3_3==29))
						{
							int LA3_5 = input.LA(4);

							if ((LA3_5==37))
							{
								alt3 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:47:5: functionDef
					{
					DebugLocation(47, 5);
					PushFollow(Follow._functionDef_in_functionDefs176);
					functionDef4=functionDef();
					PopFollow();

					stream_functionDef.Add(functionDef4.Tree);

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: functionDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 47:19: -> ^( FUNCTION_DEFS ( functionDef )+ )
			{
				DebugLocation(47, 22);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:47:22: ^( FUNCTION_DEFS ( functionDef )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(47, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_DEFS, "FUNCTION_DEFS"), root_1);

				DebugLocation(47, 38);
				if (!(stream_functionDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_functionDef.HasNext )
				{
					DebugLocation(47, 38);
					adaptor.AddChild(root_1, stream_functionDef.NextTree());

				}
				stream_functionDef.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDefs", 3);
			LeaveRule("functionDefs", 3);
			LeaveRule_functionDefs();
		}
		DebugLocation(48, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDefs"); }
		return retval;

	}
	// $ANTLR end "functionDefs"

	partial void EnterRule_functionDef();
	partial void LeaveRule_functionDef();

	// $ANTLR start "functionDef"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:1: functionDef : ID ( '(' ( parameters )? ')' '{' ( body )? '}' ) -> ^( FUNCTION_DEF ID ( parameters )? ( body )? ) ;
	[GrammarRule("functionDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> functionDef()
	{
		EnterRule_functionDef();
		EnterRule("functionDef", 4);
		TraceIn("functionDef", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID5 = default(CommonToken);
		CommonToken char_literal6 = default(CommonToken);
		CommonToken char_literal8 = default(CommonToken);
		CommonToken char_literal9 = default(CommonToken);
		CommonToken char_literal11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> parameters7 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> body10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID5_tree = default(CommonTree);
		CommonTree char_literal6_tree = default(CommonTree);
		CommonTree char_literal8_tree = default(CommonTree);
		CommonTree char_literal9_tree = default(CommonTree);
		CommonTree char_literal11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_37=new RewriteRuleITokenStream(adaptor,"token 37");
		RewriteRuleITokenStream stream_28=new RewriteRuleITokenStream(adaptor,"token 28");
		RewriteRuleITokenStream stream_29=new RewriteRuleITokenStream(adaptor,"token 29");
		RewriteRuleITokenStream stream_38=new RewriteRuleITokenStream(adaptor,"token 38");
		RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
		RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
		try { DebugEnterRule(GrammarFileName, "functionDef");
		DebugLocation(50, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:12: ( ID ( '(' ( parameters )? ')' '{' ( body )? '}' ) -> ^( FUNCTION_DEF ID ( parameters )? ( body )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:14: ID ( '(' ( parameters )? ')' '{' ( body )? '}' )
			{
			DebugLocation(50, 14);
			ID5=(CommonToken)Match(input,ID,Follow._ID_in_functionDef196);  
			stream_ID.Add(ID5);

			DebugLocation(50, 17);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:17: ( '(' ( parameters )? ')' '{' ( body )? '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:18: '(' ( parameters )? ')' '{' ( body )? '}'
			{
			DebugLocation(50, 18);
			char_literal6=(CommonToken)Match(input,28,Follow._28_in_functionDef199);  
			stream_28.Add(char_literal6);

			DebugLocation(50, 22);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:22: ( parameters )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==ID))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:22: parameters
				{
				DebugLocation(50, 22);
				PushFollow(Follow._parameters_in_functionDef201);
				parameters7=parameters();
				PopFollow();

				stream_parameters.Add(parameters7.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(50, 34);
			char_literal8=(CommonToken)Match(input,29,Follow._29_in_functionDef204);  
			stream_29.Add(char_literal8);

			DebugLocation(50, 38);
			char_literal9=(CommonToken)Match(input,37,Follow._37_in_functionDef206);  
			stream_37.Add(char_literal9);

			DebugLocation(50, 42);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:42: ( body )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==ID))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:42: body
				{
				DebugLocation(50, 42);
				PushFollow(Follow._body_in_functionDef208);
				body10=body();
				PopFollow();

				stream_body.Add(body10.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(50, 48);
			char_literal11=(CommonToken)Match(input,38,Follow._38_in_functionDef211);  
			stream_38.Add(char_literal11);


			}



			{
			// AST REWRITE
			// elements: ID, body, parameters
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 50:53: -> ^( FUNCTION_DEF ID ( parameters )? ( body )? )
			{
				DebugLocation(50, 56);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:56: ^( FUNCTION_DEF ID ( parameters )? ( body )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(50, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_DEF, "FUNCTION_DEF"), root_1);

				DebugLocation(50, 71);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(50, 74);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:74: ( parameters )?
				if (stream_parameters.HasNext)
				{
					DebugLocation(50, 74);
					adaptor.AddChild(root_1, stream_parameters.NextTree());

				}
				stream_parameters.Reset();
				DebugLocation(50, 86);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:50:86: ( body )?
				if (stream_body.HasNext)
				{
					DebugLocation(50, 86);
					adaptor.AddChild(root_1, stream_body.NextTree());

				}
				stream_body.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDef", 4);
			LeaveRule("functionDef", 4);
			LeaveRule_functionDef();
		}
		DebugLocation(51, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDef"); }
		return retval;

	}
	// $ANTLR end "functionDef"

	partial void EnterRule_body();
	partial void LeaveRule_body();

	// $ANTLR start "body"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:53:1: body : ( statement )+ -> ^( FUNCTION_BODY ( statement )+ ) ;
	[GrammarRule("body")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> body()
	{
		EnterRule_body();
		EnterRule("body", 5);
		TraceIn("body", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "body");
		DebugLocation(53, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:53:6: ( ( statement )+ -> ^( FUNCTION_BODY ( statement )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:53:8: ( statement )+
			{
			DebugLocation(53, 8);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:53:8: ( statement )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==ID))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:53:9: statement
					{
					DebugLocation(53, 9);
					PushFollow(Follow._statement_in_body238);
					statement12=statement();
					PopFollow();

					stream_statement.Add(statement12.Tree);

					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 53:21: -> ^( FUNCTION_BODY ( statement )+ )
			{
				DebugLocation(53, 24);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:53:24: ^( FUNCTION_BODY ( statement )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(53, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_BODY, "FUNCTION_BODY"), root_1);

				DebugLocation(53, 40);
				if (!(stream_statement.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_statement.HasNext )
				{
					DebugLocation(53, 40);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("body", 5);
			LeaveRule("body", 5);
			LeaveRule_body();
		}
		DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "body"); }
		return retval;

	}
	// $ANTLR end "body"

	partial void EnterRule_parameters();
	partial void LeaveRule_parameters();

	// $ANTLR start "parameters"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:56:1: parameters : param ( ',' param )* -> ^( PARAMS ( param )+ ) ;
	[GrammarRule("parameters")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> parameters()
	{
		EnterRule_parameters();
		EnterRule("parameters", 6);
		TraceIn("parameters", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal14 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> param13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> param15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal14_tree = default(CommonTree);
		RewriteRuleITokenStream stream_32=new RewriteRuleITokenStream(adaptor,"token 32");
		RewriteRuleSubtreeStream stream_param=new RewriteRuleSubtreeStream(adaptor,"rule param");
		try { DebugEnterRule(GrammarFileName, "parameters");
		DebugLocation(56, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:56:12: ( param ( ',' param )* -> ^( PARAMS ( param )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:56:14: param ( ',' param )*
			{
			DebugLocation(56, 14);
			PushFollow(Follow._param_in_parameters260);
			param13=param();
			PopFollow();

			stream_param.Add(param13.Tree);
			DebugLocation(56, 20);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:56:20: ( ',' param )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==32))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:56:21: ',' param
					{
					DebugLocation(56, 21);
					char_literal14=(CommonToken)Match(input,32,Follow._32_in_parameters263);  
					stream_32.Add(char_literal14);

					DebugLocation(56, 25);
					PushFollow(Follow._param_in_parameters265);
					param15=param();
					PopFollow();

					stream_param.Add(param15.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: param
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 56:33: -> ^( PARAMS ( param )+ )
			{
				DebugLocation(56, 36);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:56:36: ^( PARAMS ( param )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(56, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, "PARAMS"), root_1);

				DebugLocation(56, 45);
				if (!(stream_param.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_param.HasNext )
				{
					DebugLocation(56, 45);
					adaptor.AddChild(root_1, stream_param.NextTree());

				}
				stream_param.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameters", 6);
			LeaveRule("parameters", 6);
			LeaveRule_parameters();
		}
		DebugLocation(57, 1);
		} finally { DebugExitRule(GrammarFileName, "parameters"); }
		return retval;

	}
	// $ANTLR end "parameters"

	partial void EnterRule_param();
	partial void LeaveRule_param();

	// $ANTLR start "param"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:59:1: param : ( ID ID ) -> ^( PARAM ID ID ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> param()
	{
		EnterRule_param();
		EnterRule("param", 7);
		TraceIn("param", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID16 = default(CommonToken);
		CommonToken ID17 = default(CommonToken);

		CommonTree ID16_tree = default(CommonTree);
		CommonTree ID17_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(59, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:59:7: ( ( ID ID ) -> ^( PARAM ID ID ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:59:9: ( ID ID )
			{
			DebugLocation(59, 9);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:59:9: ( ID ID )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:59:10: ID ID
			{
			DebugLocation(59, 10);
			ID16=(CommonToken)Match(input,ID,Follow._ID_in_param288);  
			stream_ID.Add(ID16);

			DebugLocation(59, 13);
			ID17=(CommonToken)Match(input,ID,Follow._ID_in_param290);  
			stream_ID.Add(ID17);


			}



			{
			// AST REWRITE
			// elements: ID, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 59:17: -> ^( PARAM ID ID )
			{
				DebugLocation(59, 20);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:59:20: ^( PARAM ID ID )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(59, 22);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAM, "PARAM"), root_1);

				DebugLocation(59, 28);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(59, 31);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 7);
			LeaveRule("param", 7);
			LeaveRule_param();
		}
		DebugLocation(60, 1);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_functionCall();
	partial void LeaveRule_functionCall();

	// $ANTLR start "functionCall"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:64:1: functionCall : f= ID ( '(' ( arguments )? ')' ) -> ^( FUNCTION_CALL $f ( arguments )? ) ;
	[GrammarRule("functionCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> functionCall()
	{
		EnterRule_functionCall();
		EnterRule("functionCall", 8);
		TraceIn("functionCall", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken f = default(CommonToken);
		CommonToken char_literal18 = default(CommonToken);
		CommonToken char_literal20 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree f_tree = default(CommonTree);
		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_28=new RewriteRuleITokenStream(adaptor,"token 28");
		RewriteRuleITokenStream stream_29=new RewriteRuleITokenStream(adaptor,"token 29");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		try { DebugEnterRule(GrammarFileName, "functionCall");
		DebugLocation(64, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:65:2: (f= ID ( '(' ( arguments )? ')' ) -> ^( FUNCTION_CALL $f ( arguments )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:65:4: f= ID ( '(' ( arguments )? ')' )
			{
			DebugLocation(65, 5);
			f=(CommonToken)Match(input,ID,Follow._ID_in_functionCall317);  
			stream_ID.Add(f);

			DebugLocation(65, 9);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:65:9: ( '(' ( arguments )? ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:65:10: '(' ( arguments )? ')'
			{
			DebugLocation(65, 10);
			char_literal18=(CommonToken)Match(input,28,Follow._28_in_functionCall320);  
			stream_28.Add(char_literal18);

			DebugLocation(65, 14);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:65:14: ( arguments )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==FLOAT_VALUE||(LA8_0>=ID && LA8_0<=INT_VALUE)||LA8_0==28))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:65:14: arguments
				{
				DebugLocation(65, 14);
				PushFollow(Follow._arguments_in_functionCall322);
				arguments19=arguments();
				PopFollow();

				stream_arguments.Add(arguments19.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(65, 25);
			char_literal20=(CommonToken)Match(input,29,Follow._29_in_functionCall325);  
			stream_29.Add(char_literal20);


			}



			{
			// AST REWRITE
			// elements: arguments, f
			// token labels: f
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_f=new RewriteRuleITokenStream(adaptor,"token f",f);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 65:30: -> ^( FUNCTION_CALL $f ( arguments )? )
			{
				DebugLocation(65, 33);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:65:33: ^( FUNCTION_CALL $f ( arguments )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(65, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

				DebugLocation(65, 50);
				adaptor.AddChild(root_1, stream_f.NextNode());
				DebugLocation(65, 52);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:65:52: ( arguments )?
				if (stream_arguments.HasNext)
				{
					DebugLocation(65, 52);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

				}
				stream_arguments.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionCall", 8);
			LeaveRule("functionCall", 8);
			LeaveRule_functionCall();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "functionCall"); }
		return retval;

	}
	// $ANTLR end "functionCall"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:68:1: arguments : argument ( ',' argument )* -> ^( FUNCTION_ARGUMENTS ( argument )+ ) ;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 9);
		TraceIn("arguments", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal22 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> argument21 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> argument23 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal22_tree = default(CommonTree);
		RewriteRuleITokenStream stream_32=new RewriteRuleITokenStream(adaptor,"token 32");
		RewriteRuleSubtreeStream stream_argument=new RewriteRuleSubtreeStream(adaptor,"rule argument");
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(68, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:69:2: ( argument ( ',' argument )* -> ^( FUNCTION_ARGUMENTS ( argument )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:69:4: argument ( ',' argument )*
			{
			DebugLocation(69, 4);
			PushFollow(Follow._argument_in_arguments350);
			argument21=argument();
			PopFollow();

			stream_argument.Add(argument21.Tree);
			DebugLocation(69, 13);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:69:13: ( ',' argument )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==32))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:69:14: ',' argument
					{
					DebugLocation(69, 14);
					char_literal22=(CommonToken)Match(input,32,Follow._32_in_arguments353);  
					stream_32.Add(char_literal22);

					DebugLocation(69, 18);
					PushFollow(Follow._argument_in_arguments355);
					argument23=argument();
					PopFollow();

					stream_argument.Add(argument23.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: argument
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 69:29: -> ^( FUNCTION_ARGUMENTS ( argument )+ )
			{
				DebugLocation(69, 32);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:69:32: ^( FUNCTION_ARGUMENTS ( argument )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(69, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_ARGUMENTS, "FUNCTION_ARGUMENTS"), root_1);

				DebugLocation(69, 53);
				if (!(stream_argument.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_argument.HasNext )
				{
					DebugLocation(69, 53);
					adaptor.AddChild(root_1, stream_argument.NextTree());

				}
				stream_argument.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 9);
			LeaveRule("arguments", 9);
			LeaveRule_arguments();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_argument();
	partial void LeaveRule_argument();

	// $ANTLR start "argument"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:72:1: argument : value -> ^( FUNCTION_ARGUMENT value ) ;
	[GrammarRule("argument")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> argument()
	{
		EnterRule_argument();
		EnterRule("argument", 10);
		TraceIn("argument", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> value24 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
		try { DebugEnterRule(GrammarFileName, "argument");
		DebugLocation(72, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:72:9: ( value -> ^( FUNCTION_ARGUMENT value ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:72:11: value
			{
			DebugLocation(72, 11);
			PushFollow(Follow._value_in_argument376);
			value24=value();
			PopFollow();

			stream_value.Add(value24.Tree);


			{
			// AST REWRITE
			// elements: value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 72:17: -> ^( FUNCTION_ARGUMENT value )
			{
				DebugLocation(72, 20);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:72:20: ^( FUNCTION_ARGUMENT value )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(72, 22);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_ARGUMENT, "FUNCTION_ARGUMENT"), root_1);

				DebugLocation(72, 40);
				adaptor.AddChild(root_1, stream_value.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument", 10);
			LeaveRule("argument", 10);
			LeaveRule_argument();
		}
		DebugLocation(73, 1);
		} finally { DebugExitRule(GrammarFileName, "argument"); }
		return retval;

	}
	// $ANTLR end "argument"

	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:77:1: program : ( statement )+ -> ^( PROGRAM ( statement )+ ) ;
	[GrammarRule("program")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 11);
		TraceIn("program", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement25 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(77, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:78:2: ( ( statement )+ -> ^( PROGRAM ( statement )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:78:4: ( statement )+
			{
			DebugLocation(78, 4);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:78:4: ( statement )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==ID))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:78:4: statement
					{
					DebugLocation(78, 4);
					PushFollow(Follow._statement_in_program397);
					statement25=statement();
					PopFollow();

					stream_statement.Add(statement25.Tree);

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 78:15: -> ^( PROGRAM ( statement )+ )
			{
				DebugLocation(78, 18);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:78:18: ^( PROGRAM ( statement )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(78, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

				DebugLocation(78, 28);
				if (!(stream_statement.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_statement.HasNext )
				{
					DebugLocation(78, 28);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 11);
			LeaveRule("program", 11);
			LeaveRule_program();
		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:81:1: statement : ( declaration ';' -> declaration | assignment ';' -> assignment | functionCall ';' -> functionCall );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 12);
		TraceIn("statement", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal27 = default(CommonToken);
		CommonToken char_literal29 = default(CommonToken);
		CommonToken char_literal31 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> declaration26 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignment28 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> functionCall30 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal27_tree = default(CommonTree);
		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		RewriteRuleITokenStream stream_35=new RewriteRuleITokenStream(adaptor,"token 35");
		RewriteRuleSubtreeStream stream_functionCall=new RewriteRuleSubtreeStream(adaptor,"rule functionCall");
		RewriteRuleSubtreeStream stream_assignment=new RewriteRuleSubtreeStream(adaptor,"rule assignment");
		RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(81, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:82:2: ( declaration ';' -> declaration | assignment ';' -> assignment | functionCall ';' -> functionCall )
			int alt11=3;
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==ID))
			{
				switch (input.LA(2))
				{
				case ID:
					{
					alt11 = 1;
					}
					break;
				case 36:
					{
					alt11 = 2;
					}
					break;
				case 28:
					{
					alt11 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 11, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:82:4: declaration ';'
				{
				DebugLocation(82, 4);
				PushFollow(Follow._declaration_in_statement419);
				declaration26=declaration();
				PopFollow();

				stream_declaration.Add(declaration26.Tree);
				DebugLocation(82, 16);
				char_literal27=(CommonToken)Match(input,35,Follow._35_in_statement421);  
				stream_35.Add(char_literal27);



				{
				// AST REWRITE
				// elements: declaration
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 82:20: -> declaration
				{
					DebugLocation(82, 23);
					adaptor.AddChild(root_0, stream_declaration.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:83:4: assignment ';'
				{
				DebugLocation(83, 4);
				PushFollow(Follow._assignment_in_statement430);
				assignment28=assignment();
				PopFollow();

				stream_assignment.Add(assignment28.Tree);
				DebugLocation(83, 15);
				char_literal29=(CommonToken)Match(input,35,Follow._35_in_statement432);  
				stream_35.Add(char_literal29);



				{
				// AST REWRITE
				// elements: assignment
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 83:19: -> assignment
				{
					DebugLocation(83, 22);
					adaptor.AddChild(root_0, stream_assignment.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:84:4: functionCall ';'
				{
				DebugLocation(84, 4);
				PushFollow(Follow._functionCall_in_statement441);
				functionCall30=functionCall();
				PopFollow();

				stream_functionCall.Add(functionCall30.Tree);
				DebugLocation(84, 17);
				char_literal31=(CommonToken)Match(input,35,Follow._35_in_statement443);  
				stream_35.Add(char_literal31);



				{
				// AST REWRITE
				// elements: functionCall
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 84:21: -> functionCall
				{
					DebugLocation(84, 24);
					adaptor.AddChild(root_0, stream_functionCall.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 12);
			LeaveRule("statement", 12);
			LeaveRule_statement();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:87:1: declaration : ID ID -> ^( DECLARATION ID ID ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 13);
		TraceIn("declaration", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID32 = default(CommonToken);
		CommonToken ID33 = default(CommonToken);

		CommonTree ID32_tree = default(CommonTree);
		CommonTree ID33_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(87, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:88:2: ( ID ID -> ^( DECLARATION ID ID ) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:88:4: ID ID
			{
			DebugLocation(88, 4);
			ID32=(CommonToken)Match(input,ID,Follow._ID_in_declaration459);  
			stream_ID.Add(ID32);

			DebugLocation(88, 7);
			ID33=(CommonToken)Match(input,ID,Follow._ID_in_declaration461);  
			stream_ID.Add(ID33);



			{
			// AST REWRITE
			// elements: ID, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 88:10: -> ^( DECLARATION ID ID )
			{
				DebugLocation(88, 13);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:88:13: ^( DECLARATION ID ID )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(88, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_1);

				DebugLocation(88, 27);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(88, 30);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 13);
			LeaveRule("declaration", 13);
			LeaveRule_declaration();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();

	// $ANTLR start "assignment"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:91:1: assignment : (id= ID '=' exp= addSubExp ) -> ^( ASSIGNMENT $id $exp) ;
	[GrammarRule("assignment")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 14);
		TraceIn("assignment", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken id = default(CommonToken);
		CommonToken char_literal34 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> exp = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree id_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_36=new RewriteRuleITokenStream(adaptor,"token 36");
		RewriteRuleSubtreeStream stream_addSubExp=new RewriteRuleSubtreeStream(adaptor,"rule addSubExp");
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(91, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:92:2: ( (id= ID '=' exp= addSubExp ) -> ^( ASSIGNMENT $id $exp) )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:92:4: (id= ID '=' exp= addSubExp )
			{
			DebugLocation(92, 4);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:92:4: (id= ID '=' exp= addSubExp )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:92:5: id= ID '=' exp= addSubExp
			{
			DebugLocation(92, 7);
			id=(CommonToken)Match(input,ID,Follow._ID_in_assignment486);  
			stream_ID.Add(id);

			DebugLocation(92, 11);
			char_literal34=(CommonToken)Match(input,36,Follow._36_in_assignment488);  
			stream_36.Add(char_literal34);

			DebugLocation(92, 18);
			PushFollow(Follow._addSubExp_in_assignment492);
			exp=addSubExp();
			PopFollow();

			stream_addSubExp.Add(exp.Tree);

			}



			{
			// AST REWRITE
			// elements: id, exp
			// token labels: id
			// rule labels: exp, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_id=new RewriteRuleITokenStream(adaptor,"token id",id);
			RewriteRuleSubtreeStream stream_exp=new RewriteRuleSubtreeStream(adaptor,"rule exp",exp!=null?exp.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 92:30: -> ^( ASSIGNMENT $id $exp)
			{
				DebugLocation(92, 33);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:92:33: ^( ASSIGNMENT $id $exp)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(92, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

				DebugLocation(92, 47);
				adaptor.AddChild(root_1, stream_id.NextNode());
				DebugLocation(92, 51);
				adaptor.AddChild(root_1, stream_exp.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 14);
			LeaveRule("assignment", 14);
			LeaveRule_assignment();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_addSubExp();
	partial void LeaveRule_addSubExp();

	// $ANTLR start "addSubExp"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:95:1: addSubExp : ( mulDivExp -> mulDivExp ) ( ( '+' rhs= mulDivExp ) -> ^( '+' $addSubExp $rhs) | ( '-' rhs= mulDivExp ) -> ^( '-' $addSubExp $rhs) )* ;
	[GrammarRule("addSubExp")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> addSubExp()
	{
		EnterRule_addSubExp();
		EnterRule("addSubExp", 15);
		TraceIn("addSubExp", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal36 = default(CommonToken);
		CommonToken char_literal37 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> rhs = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mulDivExp35 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal37_tree = default(CommonTree);
		RewriteRuleITokenStream stream_31=new RewriteRuleITokenStream(adaptor,"token 31");
		RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
		RewriteRuleSubtreeStream stream_mulDivExp=new RewriteRuleSubtreeStream(adaptor,"rule mulDivExp");
		try { DebugEnterRule(GrammarFileName, "addSubExp");
		DebugLocation(95, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:96:4: ( ( mulDivExp -> mulDivExp ) ( ( '+' rhs= mulDivExp ) -> ^( '+' $addSubExp $rhs) | ( '-' rhs= mulDivExp ) -> ^( '-' $addSubExp $rhs) )* )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:96:7: ( mulDivExp -> mulDivExp ) ( ( '+' rhs= mulDivExp ) -> ^( '+' $addSubExp $rhs) | ( '-' rhs= mulDivExp ) -> ^( '-' $addSubExp $rhs) )*
			{
			DebugLocation(96, 7);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:96:7: ( mulDivExp -> mulDivExp )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:96:8: mulDivExp
			{
			DebugLocation(96, 8);
			PushFollow(Follow._mulDivExp_in_addSubExp520);
			mulDivExp35=mulDivExp();
			PopFollow();

			stream_mulDivExp.Add(mulDivExp35.Tree);


			{
			// AST REWRITE
			// elements: mulDivExp
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 96:18: -> mulDivExp
			{
				DebugLocation(96, 21);
				adaptor.AddChild(root_0, stream_mulDivExp.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(96, 32);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:96:32: ( ( '+' rhs= mulDivExp ) -> ^( '+' $addSubExp $rhs) | ( '-' rhs= mulDivExp ) -> ^( '-' $addSubExp $rhs) )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=3;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==31))
				{
					alt12 = 1;
				}
				else if ((LA12_0==33))
				{
					alt12 = 2;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:97:5: ( '+' rhs= mulDivExp )
					{
					DebugLocation(97, 5);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:97:5: ( '+' rhs= mulDivExp )
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:97:6: '+' rhs= mulDivExp
					{
					DebugLocation(97, 6);
					char_literal36=(CommonToken)Match(input,31,Follow._31_in_addSubExp534);  
					stream_31.Add(char_literal36);

					DebugLocation(97, 13);
					PushFollow(Follow._mulDivExp_in_addSubExp538);
					rhs=mulDivExp();
					PopFollow();

					stream_mulDivExp.Add(rhs.Tree);

					}



					{
					// AST REWRITE
					// elements: 31, addSubExp, rhs
					// token labels: 
					// rule labels: retval, rhs
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"rule rhs",rhs!=null?rhs.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 97:25: -> ^( '+' $addSubExp $rhs)
					{
						DebugLocation(97, 28);
						// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:97:28: ^( '+' $addSubExp $rhs)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(97, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_31.NextNode(), root_1);

						DebugLocation(97, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(97, 46);
						adaptor.AddChild(root_1, stream_rhs.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:98:5: ( '-' rhs= mulDivExp )
					{
					DebugLocation(98, 5);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:98:5: ( '-' rhs= mulDivExp )
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:98:6: '-' rhs= mulDivExp
					{
					DebugLocation(98, 6);
					char_literal37=(CommonToken)Match(input,33,Follow._33_in_addSubExp558);  
					stream_33.Add(char_literal37);

					DebugLocation(98, 13);
					PushFollow(Follow._mulDivExp_in_addSubExp562);
					rhs=mulDivExp();
					PopFollow();

					stream_mulDivExp.Add(rhs.Tree);

					}



					{
					// AST REWRITE
					// elements: 33, addSubExp, rhs
					// token labels: 
					// rule labels: retval, rhs
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"rule rhs",rhs!=null?rhs.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 98:25: -> ^( '-' $addSubExp $rhs)
					{
						DebugLocation(98, 28);
						// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:98:28: ^( '-' $addSubExp $rhs)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(98, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_33.NextNode(), root_1);

						DebugLocation(98, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(98, 46);
						adaptor.AddChild(root_1, stream_rhs.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addSubExp", 15);
			LeaveRule("addSubExp", 15);
			LeaveRule_addSubExp();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "addSubExp"); }
		return retval;

	}
	// $ANTLR end "addSubExp"

	partial void EnterRule_mulDivExp();
	partial void LeaveRule_mulDivExp();

	// $ANTLR start "mulDivExp"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:102:1: mulDivExp : ( unaryExp -> unaryExp ) ( ( '*' rhs= unaryExp ) -> ^( '*' $mulDivExp $rhs) | ( '/' rhs= unaryExp ) -> ^( '/' $mulDivExp $rhs) )* ;
	[GrammarRule("mulDivExp")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mulDivExp()
	{
		EnterRule_mulDivExp();
		EnterRule("mulDivExp", 16);
		TraceIn("mulDivExp", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal39 = default(CommonToken);
		CommonToken char_literal40 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> rhs = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExp38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		RewriteRuleITokenStream stream_30=new RewriteRuleITokenStream(adaptor,"token 30");
		RewriteRuleITokenStream stream_34=new RewriteRuleITokenStream(adaptor,"token 34");
		RewriteRuleSubtreeStream stream_unaryExp=new RewriteRuleSubtreeStream(adaptor,"rule unaryExp");
		try { DebugEnterRule(GrammarFileName, "mulDivExp");
		DebugLocation(102, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:103:4: ( ( unaryExp -> unaryExp ) ( ( '*' rhs= unaryExp ) -> ^( '*' $mulDivExp $rhs) | ( '/' rhs= unaryExp ) -> ^( '/' $mulDivExp $rhs) )* )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:103:7: ( unaryExp -> unaryExp ) ( ( '*' rhs= unaryExp ) -> ^( '*' $mulDivExp $rhs) | ( '/' rhs= unaryExp ) -> ^( '/' $mulDivExp $rhs) )*
			{
			DebugLocation(103, 7);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:103:7: ( unaryExp -> unaryExp )
			DebugEnterAlt(1);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:103:8: unaryExp
			{
			DebugLocation(103, 8);
			PushFollow(Follow._unaryExp_in_mulDivExp596);
			unaryExp38=unaryExp();
			PopFollow();

			stream_unaryExp.Add(unaryExp38.Tree);


			{
			// AST REWRITE
			// elements: unaryExp
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 103:17: -> unaryExp
			{
				DebugLocation(103, 20);
				adaptor.AddChild(root_0, stream_unaryExp.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(103, 30);
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:103:30: ( ( '*' rhs= unaryExp ) -> ^( '*' $mulDivExp $rhs) | ( '/' rhs= unaryExp ) -> ^( '/' $mulDivExp $rhs) )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=3;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==30))
				{
					alt13 = 1;
				}
				else if ((LA13_0==34))
				{
					alt13 = 2;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:104:5: ( '*' rhs= unaryExp )
					{
					DebugLocation(104, 5);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:104:5: ( '*' rhs= unaryExp )
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:104:6: '*' rhs= unaryExp
					{
					DebugLocation(104, 6);
					char_literal39=(CommonToken)Match(input,30,Follow._30_in_mulDivExp610);  
					stream_30.Add(char_literal39);

					DebugLocation(104, 13);
					PushFollow(Follow._unaryExp_in_mulDivExp614);
					rhs=unaryExp();
					PopFollow();

					stream_unaryExp.Add(rhs.Tree);

					}



					{
					// AST REWRITE
					// elements: rhs, mulDivExp, 30
					// token labels: 
					// rule labels: retval, rhs
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"rule rhs",rhs!=null?rhs.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 104:24: -> ^( '*' $mulDivExp $rhs)
					{
						DebugLocation(104, 27);
						// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:104:27: ^( '*' $mulDivExp $rhs)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(104, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_30.NextNode(), root_1);

						DebugLocation(104, 34);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(104, 45);
						adaptor.AddChild(root_1, stream_rhs.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:105:6: ( '/' rhs= unaryExp )
					{
					DebugLocation(105, 6);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:105:6: ( '/' rhs= unaryExp )
					DebugEnterAlt(1);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:105:7: '/' rhs= unaryExp
					{
					DebugLocation(105, 7);
					char_literal40=(CommonToken)Match(input,34,Follow._34_in_mulDivExp635);  
					stream_34.Add(char_literal40);

					DebugLocation(105, 14);
					PushFollow(Follow._unaryExp_in_mulDivExp639);
					rhs=unaryExp();
					PopFollow();

					stream_unaryExp.Add(rhs.Tree);

					}



					{
					// AST REWRITE
					// elements: 34, rhs, mulDivExp
					// token labels: 
					// rule labels: retval, rhs
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"rule rhs",rhs!=null?rhs.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 105:25: -> ^( '/' $mulDivExp $rhs)
					{
						DebugLocation(105, 28);
						// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:105:28: ^( '/' $mulDivExp $rhs)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(105, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_34.NextNode(), root_1);

						DebugLocation(105, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(105, 46);
						adaptor.AddChild(root_1, stream_rhs.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mulDivExp", 16);
			LeaveRule("mulDivExp", 16);
			LeaveRule_mulDivExp();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "mulDivExp"); }
		return retval;

	}
	// $ANTLR end "mulDivExp"

	partial void EnterRule_unaryExp();
	partial void LeaveRule_unaryExp();

	// $ANTLR start "unaryExp"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:109:1: unaryExp : ( '-' value -> ^( UNARY value ) | value );
	[GrammarRule("unaryExp")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> unaryExp()
	{
		EnterRule_unaryExp();
		EnterRule("unaryExp", 17);
		TraceIn("unaryExp", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal41 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> value42 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> value43 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
		RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
		try { DebugEnterRule(GrammarFileName, "unaryExp");
		DebugLocation(109, 3);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:110:4: ( '-' value -> ^( UNARY value ) | value )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==33))
			{
				alt14 = 1;
			}
			else if ((LA14_0==FLOAT_VALUE||(LA14_0>=ID && LA14_0<=INT_VALUE)||LA14_0==28))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:110:7: '-' value
				{
				DebugLocation(110, 7);
				char_literal41=(CommonToken)Match(input,33,Follow._33_in_unaryExp672);  
				stream_33.Add(char_literal41);

				DebugLocation(110, 11);
				PushFollow(Follow._value_in_unaryExp674);
				value42=value();
				PopFollow();

				stream_value.Add(value42.Tree);


				{
				// AST REWRITE
				// elements: value
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 110:17: -> ^( UNARY value )
				{
					DebugLocation(110, 20);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:110:20: ^( UNARY value )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(110, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNARY, "UNARY"), root_1);

					DebugLocation(110, 28);
					adaptor.AddChild(root_1, stream_value.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:111:5: value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(111, 5);
				PushFollow(Follow._value_in_unaryExp688);
				value43=value();
				PopFollow();

				adaptor.AddChild(root_0, value43.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExp", 17);
			LeaveRule("unaryExp", 17);
			LeaveRule_unaryExp();
		}
		DebugLocation(112, 3);
		} finally { DebugExitRule(GrammarFileName, "unaryExp"); }
		return retval;

	}
	// $ANTLR end "unaryExp"

	partial void EnterRule_value();
	partial void LeaveRule_value();

	// $ANTLR start "value"
	// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:114:1: value : ( ID -> ^( VARIABLE ID ) | INT_VALUE -> ^( LITERAL TYPE_INT INT_VALUE ) | FLOAT_VALUE -> ^( LITERAL TYPE_FLOAT FLOAT_VALUE ) | '(' e= addSubExp ')' -> ^( PARENEXP $e) );
	[GrammarRule("value")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> value()
	{
		EnterRule_value();
		EnterRule("value", 18);
		TraceIn("value", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID44 = default(CommonToken);
		CommonToken INT_VALUE45 = default(CommonToken);
		CommonToken FLOAT_VALUE46 = default(CommonToken);
		CommonToken char_literal47 = default(CommonToken);
		CommonToken char_literal48 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> e = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID44_tree = default(CommonTree);
		CommonTree INT_VALUE45_tree = default(CommonTree);
		CommonTree FLOAT_VALUE46_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree char_literal48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INT_VALUE=new RewriteRuleITokenStream(adaptor,"token INT_VALUE");
		RewriteRuleITokenStream stream_FLOAT_VALUE=new RewriteRuleITokenStream(adaptor,"token FLOAT_VALUE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_28=new RewriteRuleITokenStream(adaptor,"token 28");
		RewriteRuleITokenStream stream_29=new RewriteRuleITokenStream(adaptor,"token 29");
		RewriteRuleSubtreeStream stream_addSubExp=new RewriteRuleSubtreeStream(adaptor,"rule addSubExp");
		try { DebugEnterRule(GrammarFileName, "value");
		DebugLocation(114, 1);
		try
		{
			// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:115:2: ( ID -> ^( VARIABLE ID ) | INT_VALUE -> ^( LITERAL TYPE_INT INT_VALUE ) | FLOAT_VALUE -> ^( LITERAL TYPE_FLOAT FLOAT_VALUE ) | '(' e= addSubExp ')' -> ^( PARENEXP $e) )
			int alt15=4;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt15 = 1;
				}
				break;
			case INT_VALUE:
				{
				alt15 = 2;
				}
				break;
			case FLOAT_VALUE:
				{
				alt15 = 3;
				}
				break;
			case 28:
				{
				alt15 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:115:4: ID
				{
				DebugLocation(115, 4);
				ID44=(CommonToken)Match(input,ID,Follow._ID_in_value702);  
				stream_ID.Add(ID44);



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 115:7: -> ^( VARIABLE ID )
				{
					DebugLocation(115, 10);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:115:10: ^( VARIABLE ID )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(115, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE, "VARIABLE"), root_1);

					DebugLocation(115, 21);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:116:4: INT_VALUE
				{
				DebugLocation(116, 4);
				INT_VALUE45=(CommonToken)Match(input,INT_VALUE,Follow._INT_VALUE_in_value715);  
				stream_INT_VALUE.Add(INT_VALUE45);



				{
				// AST REWRITE
				// elements: INT_VALUE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 116:14: -> ^( LITERAL TYPE_INT INT_VALUE )
				{
					DebugLocation(116, 17);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:116:17: ^( LITERAL TYPE_INT INT_VALUE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(116, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LITERAL, "LITERAL"), root_1);

					DebugLocation(116, 27);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TYPE_INT, "TYPE_INT"));
					DebugLocation(116, 36);
					adaptor.AddChild(root_1, stream_INT_VALUE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:117:4: FLOAT_VALUE
				{
				DebugLocation(117, 4);
				FLOAT_VALUE46=(CommonToken)Match(input,FLOAT_VALUE,Follow._FLOAT_VALUE_in_value730);  
				stream_FLOAT_VALUE.Add(FLOAT_VALUE46);



				{
				// AST REWRITE
				// elements: FLOAT_VALUE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 117:16: -> ^( LITERAL TYPE_FLOAT FLOAT_VALUE )
				{
					DebugLocation(117, 19);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:117:19: ^( LITERAL TYPE_FLOAT FLOAT_VALUE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(117, 21);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LITERAL, "LITERAL"), root_1);

					DebugLocation(117, 29);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TYPE_FLOAT, "TYPE_FLOAT"));
					DebugLocation(117, 40);
					adaptor.AddChild(root_1, stream_FLOAT_VALUE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:118:4: '(' e= addSubExp ')'
				{
				DebugLocation(118, 4);
				char_literal47=(CommonToken)Match(input,28,Follow._28_in_value745);  
				stream_28.Add(char_literal47);

				DebugLocation(118, 9);
				PushFollow(Follow._addSubExp_in_value749);
				e=addSubExp();
				PopFollow();

				stream_addSubExp.Add(e.Tree);
				DebugLocation(118, 20);
				char_literal48=(CommonToken)Match(input,29,Follow._29_in_value751);  
				stream_29.Add(char_literal48);



				{
				// AST REWRITE
				// elements: e
				// token labels: 
				// rule labels: retval, e
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 118:24: -> ^( PARENEXP $e)
				{
					DebugLocation(118, 27);
					// C:\\Users\\Home\\Dropbox\\NeoInterpreter\\NeoCompiler\\Neo.g:118:27: ^( PARENEXP $e)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(118, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARENEXP, "PARENEXP"), root_1);

					DebugLocation(118, 39);
					adaptor.AddChild(root_1, stream_e.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("value", 18);
			LeaveRule("value", 18);
			LeaveRule_value();
		}
		DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "value"); }
		return retval;

	}
	// $ANTLR end "value"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _script_in_file128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDefs_in_script147 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _program_in_script150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDef_in_functionDefs176 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _ID_in_functionDef196 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_functionDef199 = new BitSet(new ulong[]{0x20008000UL});
		public static readonly BitSet _parameters_in_functionDef201 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_functionDef204 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_functionDef206 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _body_in_functionDef208 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _38_in_functionDef211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_body238 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _param_in_parameters260 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _32_in_parameters263 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _param_in_parameters265 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _ID_in_param288 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_param290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_functionCall317 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_functionCall320 = new BitSet(new ulong[]{0x30018100UL});
		public static readonly BitSet _arguments_in_functionCall322 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_functionCall325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argument_in_arguments350 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _32_in_arguments353 = new BitSet(new ulong[]{0x10018100UL});
		public static readonly BitSet _argument_in_arguments355 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _value_in_argument376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_program397 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _declaration_in_statement419 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_statement421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_in_statement430 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_statement432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_statement441 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_statement443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_declaration459 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_declaration461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_assignment486 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_assignment488 = new BitSet(new ulong[]{0x210018100UL});
		public static readonly BitSet _addSubExp_in_assignment492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mulDivExp_in_addSubExp520 = new BitSet(new ulong[]{0x280000002UL});
		public static readonly BitSet _31_in_addSubExp534 = new BitSet(new ulong[]{0x210018100UL});
		public static readonly BitSet _mulDivExp_in_addSubExp538 = new BitSet(new ulong[]{0x280000002UL});
		public static readonly BitSet _33_in_addSubExp558 = new BitSet(new ulong[]{0x210018100UL});
		public static readonly BitSet _mulDivExp_in_addSubExp562 = new BitSet(new ulong[]{0x280000002UL});
		public static readonly BitSet _unaryExp_in_mulDivExp596 = new BitSet(new ulong[]{0x440000002UL});
		public static readonly BitSet _30_in_mulDivExp610 = new BitSet(new ulong[]{0x210018100UL});
		public static readonly BitSet _unaryExp_in_mulDivExp614 = new BitSet(new ulong[]{0x440000002UL});
		public static readonly BitSet _34_in_mulDivExp635 = new BitSet(new ulong[]{0x210018100UL});
		public static readonly BitSet _unaryExp_in_mulDivExp639 = new BitSet(new ulong[]{0x440000002UL});
		public static readonly BitSet _33_in_unaryExp672 = new BitSet(new ulong[]{0x10018100UL});
		public static readonly BitSet _value_in_unaryExp674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_unaryExp688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_value702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_VALUE_in_value715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_VALUE_in_value730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _28_in_value745 = new BitSet(new ulong[]{0x210018100UL});
		public static readonly BitSet _addSubExp_in_value749 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_value751 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
