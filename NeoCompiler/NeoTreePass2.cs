//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g 2023-05-16 20:33:31

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using Neo;
using System;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class NeoTreePass2 : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ASSIGNMENT", "COMMENT", "DECLARATION", "FILE", "FLOAT_VALUE", "FUNCTION_ARGUMENT", "FUNCTION_ARGUMENTS", "FUNCTION_BODY", "FUNCTION_CALL", "FUNCTION_DEF", "FUNCTION_DEFS", "ID", "INT_VALUE", "LITERAL", "PARAM", "PARAMS", "PARENEXP", "PROGRAM", "SCRIPT", "TYPE_FLOAT", "TYPE_INT", "UNARY", "VARIABLE", "WS", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'='", "'{'", "'}'", "FLOAT", "INT"
	};
	public const int EOF=-1;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int ASSIGNMENT=4;
	public const int COMMENT=5;
	public const int DECLARATION=6;
	public const int FILE=7;
	public const int FLOAT_VALUE=8;
	public const int FUNCTION_ARGUMENT=9;
	public const int FUNCTION_ARGUMENTS=10;
	public const int FUNCTION_BODY=11;
	public const int FUNCTION_CALL=12;
	public const int FUNCTION_DEF=13;
	public const int FUNCTION_DEFS=14;
	public const int ID=15;
	public const int INT_VALUE=16;
	public const int LITERAL=17;
	public const int PARAM=18;
	public const int PARAMS=19;
	public const int PARENEXP=20;
	public const int PROGRAM=21;
	public const int SCRIPT=22;
	public const int TYPE_FLOAT=23;
	public const int TYPE_INT=24;
	public const int UNARY=25;
	public const int VARIABLE=26;
	public const int WS=27;
	public const int FLOAT=39;
	public const int INT=40;

	public NeoTreePass2(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public NeoTreePass2(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return NeoTreePass2.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g"; } }


	public void	Process() {
			file();
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_file();
	partial void LeaveRule_file();
	// $ANTLR start "file"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:21:1: file : (| ^( FILE script ) );
	[GrammarRule("file")]
	private void file()
	{
		EnterRule_file();
		EnterRule("file", 1);
		TraceIn("file", 1);
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(21, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:21:6: (| ^( FILE script ) )
			int alt1=2;
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==EOF))
			{
				alt1 = 1;
			}
			else if ((LA1_1==FILE))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:22:2: 
				{
				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:22:4: ^( FILE script )
				{
				DebugLocation(22, 4);
				DebugLocation(22, 6);
				Match(input,FILE,Follow._FILE_in_file54); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(22, 11);
				PushFollow(Follow._script_in_file56);
				script();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("file", 1);
			LeaveRule("file", 1);
			LeaveRule_file();
		}
		DebugLocation(23, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return;

	}
	// $ANTLR end "file"

	partial void EnterRule_script();
	partial void LeaveRule_script();
	// $ANTLR start "script"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:25:1: script : ( ^( SCRIPT functionDefs ( program )? ) | ^( SCRIPT program ) );
	[GrammarRule("script")]
	private void script()
	{
		EnterRule_script();
		EnterRule("script", 2);
		TraceIn("script", 2);
		try { DebugEnterRule(GrammarFileName, "script");
		DebugLocation(25, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:25:9: ( ^( SCRIPT functionDefs ( program )? ) | ^( SCRIPT program ) )
			int alt3=2;
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==SCRIPT))
			{
				int LA3_2 = input.LA(2);

				if ((LA3_2==DOWN))
				{
					int LA3_3 = input.LA(3);

					if ((LA3_3==FUNCTION_DEFS))
					{
						alt3 = 1;
					}
					else if ((LA3_3==PROGRAM))
					{
						alt3 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:25:11: ^( SCRIPT functionDefs ( program )? )
				{
				DebugLocation(25, 11);
				DebugLocation(25, 13);
				Match(input,SCRIPT,Follow._SCRIPT_in_script70); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(25, 20);
				PushFollow(Follow._functionDefs_in_script72);
				functionDefs();
				PopFollow();

				DebugLocation(25, 33);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:25:33: ( program )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==PROGRAM))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:25:34: program
					{
					DebugLocation(25, 34);
					PushFollow(Follow._program_in_script75);
					program();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(25, 45);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:26:4: ^( SCRIPT program )
				{
				DebugLocation(26, 4);
				DebugLocation(26, 6);
				Match(input,SCRIPT,Follow._SCRIPT_in_script86); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(26, 13);
				PushFollow(Follow._program_in_script88);
				program();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(26, 22);


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("script", 2);
			LeaveRule("script", 2);
			LeaveRule_script();
		}
		DebugLocation(27, 1);
		} finally { DebugExitRule(GrammarFileName, "script"); }
		return;

	}
	// $ANTLR end "script"

	partial void EnterRule_functionDefs();
	partial void LeaveRule_functionDefs();
	// $ANTLR start "functionDefs"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:29:1: functionDefs : ^( FUNCTION_DEFS ( functionDef )+ ) ;
	[GrammarRule("functionDefs")]
	private void functionDefs()
	{
		EnterRule_functionDefs();
		EnterRule("functionDefs", 3);
		TraceIn("functionDefs", 3);
		try { DebugEnterRule(GrammarFileName, "functionDefs");
		DebugLocation(29, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:30:2: ( ^( FUNCTION_DEFS ( functionDef )+ ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:30:4: ^( FUNCTION_DEFS ( functionDef )+ )
			{
			DebugLocation(30, 4);
			DebugLocation(30, 6);
			Match(input,FUNCTION_DEFS,Follow._FUNCTION_DEFS_in_functionDefs104); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(30, 20);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:30:20: ( functionDef )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==FUNCTION_DEF))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:30:20: functionDef
					{
					DebugLocation(30, 20);
					PushFollow(Follow._functionDef_in_functionDefs106);
					functionDef();
					PopFollow();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionDefs", 3);
			LeaveRule("functionDefs", 3);
			LeaveRule_functionDefs();
		}
		DebugLocation(31, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDefs"); }
		return;

	}
	// $ANTLR end "functionDefs"

	partial void EnterRule_functionDef();
	partial void LeaveRule_functionDef();
	// $ANTLR start "functionDef"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:33:1: functionDef : ^( FUNCTION_DEF f= ID ( parameters[funcDef, memory] )? ( body[funcDef, memory] )? ) ;
	[GrammarRule("functionDef")]
	private void functionDef()
	{
		EnterRule_functionDef();
		EnterRule("functionDef", 4);
		TraceIn("functionDef", 4);
		CommonTree f = default(CommonTree);


			FunctionDef funcDef;
			IMemoryDecorator memory = new MemoryDecorator_StackInterface();

		try { DebugEnterRule(GrammarFileName, "functionDef");
		DebugLocation(33, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:41:2: ( ^( FUNCTION_DEF f= ID ( parameters[funcDef, memory] )? ( body[funcDef, memory] )? ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:41:4: ^( FUNCTION_DEF f= ID ( parameters[funcDef, memory] )? ( body[funcDef, memory] )? )
			{
			DebugLocation(41, 4);
			DebugLocation(41, 6);
			Match(input,FUNCTION_DEF,Follow._FUNCTION_DEF_in_functionDef131); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(41, 20);
			f=(CommonTree)Match(input,ID,Follow._ID_in_functionDef135); 
			DebugLocation(41, 24);
			funcDef = ProgramDef.Instance.FunctionDefs[(f!=null?f.Text:default(string))];
			DebugLocation(41, 79);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:41:79: ( parameters[funcDef, memory] )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==PARAMS))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:41:80: parameters[funcDef, memory]
				{
				DebugLocation(41, 80);
				PushFollow(Follow._parameters_in_functionDef140);
				parameters(funcDef, memory);
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(41, 110);
			funcDef.PreBodyParse();
			DebugLocation(41, 136);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:41:136: ( body[funcDef, memory] )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==FUNCTION_BODY))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:41:137: body[funcDef, memory]
				{
				DebugLocation(41, 137);
				PushFollow(Follow._body_in_functionDef148);
				body(funcDef, memory);
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(6); }


			Match(input, TokenTypes.Up, null); 


			}


				funcDef.PostBodyParse();

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionDef", 4);
			LeaveRule("functionDef", 4);
			LeaveRule_functionDef();
		}
		DebugLocation(42, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDef"); }
		return;

	}
	// $ANTLR end "functionDef"

	partial void EnterRule_body();
	partial void LeaveRule_body();
	// $ANTLR start "body"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:44:1: body[FunctionDef funcDef, IMemoryDecorator memory] : ^( FUNCTION_BODY ( statement[memory, funcDef.InstructionStream] )+ ) ;
	[GrammarRule("body")]
	private void body(FunctionDef funcDef, IMemoryDecorator memory)
	{
		EnterRule_body();
		EnterRule("body", 5);
		TraceIn("body", 5);
		try { DebugEnterRule(GrammarFileName, "body");
		DebugLocation(44, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:45:2: ( ^( FUNCTION_BODY ( statement[memory, funcDef.InstructionStream] )+ ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:45:4: ^( FUNCTION_BODY ( statement[memory, funcDef.InstructionStream] )+ )
			{
			DebugLocation(45, 4);
			DebugLocation(45, 6);
			Match(input,FUNCTION_BODY,Follow._FUNCTION_BODY_in_body166); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(45, 20);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:45:20: ( statement[memory, funcDef.InstructionStream] )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==ASSIGNMENT||LA7_1==DECLARATION||LA7_1==FUNCTION_CALL))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:45:21: statement[memory, funcDef.InstructionStream]
					{
					DebugLocation(45, 21);
					PushFollow(Follow._statement_in_body169);
					statement(memory, funcDef.InstructionStream);
					PopFollow();


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("body", 5);
			LeaveRule("body", 5);
			LeaveRule_body();
		}
		DebugLocation(46, 1);
		} finally { DebugExitRule(GrammarFileName, "body"); }
		return;

	}
	// $ANTLR end "body"

	partial void EnterRule_parameters();
	partial void LeaveRule_parameters();
	// $ANTLR start "parameters"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:48:1: parameters[FunctionDef funcDef, IMemoryDecorator memory] : ^( PARAMS ( param[funcDef, memory] )+ ) ;
	[GrammarRule("parameters")]
	private void parameters(FunctionDef funcDef, IMemoryDecorator memory)
	{
		EnterRule_parameters();
		EnterRule("parameters", 6);
		TraceIn("parameters", 6);
		try { DebugEnterRule(GrammarFileName, "parameters");
		DebugLocation(48, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:49:2: ( ^( PARAMS ( param[funcDef, memory] )+ ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:49:4: ^( PARAMS ( param[funcDef, memory] )+ )
			{
			DebugLocation(49, 4);
			DebugLocation(49, 6);
			Match(input,PARAMS,Follow._PARAMS_in_parameters188); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(49, 13);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:49:13: ( param[funcDef, memory] )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==PARAM))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:49:14: param[funcDef, memory]
					{
					DebugLocation(49, 14);
					PushFollow(Follow._param_in_parameters191);
					param(funcDef, memory);
					PopFollow();


					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameters", 6);
			LeaveRule("parameters", 6);
			LeaveRule_parameters();
		}
		DebugLocation(50, 1);
		} finally { DebugExitRule(GrammarFileName, "parameters"); }
		return;

	}
	// $ANTLR end "parameters"

	partial void EnterRule_param();
	partial void LeaveRule_param();
	// $ANTLR start "param"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:52:1: param[FunctionDef funcDef, IMemoryDecorator memory] : ^( PARAM t= ID v= ID ) ;
	[GrammarRule("param")]
	private void param(FunctionDef funcDef, IMemoryDecorator memory)
	{
		EnterRule_param();
		EnterRule("param", 7);
		TraceIn("param", 7);
		CommonTree t = default(CommonTree);
		CommonTree v = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(52, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:53:2: ( ^( PARAM t= ID v= ID ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:53:4: ^( PARAM t= ID v= ID )
			{
			DebugLocation(53, 4);
			DebugLocation(53, 6);
			Match(input,PARAM,Follow._PARAM_in_param210); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(53, 13);
			t=(CommonTree)Match(input,ID,Follow._ID_in_param214); 
			DebugLocation(53, 18);
			v=(CommonTree)Match(input,ID,Follow._ID_in_param218); 

			Match(input, TokenTypes.Up, null); 

			DebugLocation(53, 23);

					memory.AllocateStorage( (v!=null?v.Text:default(string)), (t!=null?t.Text:default(string)), funcDef );
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("param", 7);
			LeaveRule("param", 7);
			LeaveRule_param();
		}
		DebugLocation(56, 1);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return;

	}
	// $ANTLR end "param"

	partial void EnterRule_functionCall();
	partial void LeaveRule_functionCall();
	// $ANTLR start "functionCall"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:60:1: functionCall[List<Instruction> instructionStream] : ^( FUNCTION_CALL f= ID ( arguments[instructionStream] )? ) ;
	[GrammarRule("functionCall")]
	private void functionCall(List<Instruction> instructionStream)
	{
		EnterRule_functionCall();
		EnterRule("functionCall", 8);
		TraceIn("functionCall", 8);
		CommonTree f = default(CommonTree);


			FunctionDef funcDef;

		try { DebugEnterRule(GrammarFileName, "functionCall");
		DebugLocation(60, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:64:2: ( ^( FUNCTION_CALL f= ID ( arguments[instructionStream] )? ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:64:4: ^( FUNCTION_CALL f= ID ( arguments[instructionStream] )? )
			{
			DebugLocation(64, 4);
			DebugLocation(64, 6);
			Match(input,FUNCTION_CALL,Follow._FUNCTION_CALL_in_functionCall243); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(64, 21);
			f=(CommonTree)Match(input,ID,Follow._ID_in_functionCall247); 
			DebugLocation(64, 25);

							funcDef = ProgramDef.Instance.FunctionDefs[(f!=null?f.Text:default(string))];
							instructionStream.Add( new PushFrameInstruction(new LiteralValue(funcDef.StackFrameSize)) );
						
			DebugLocation(67, 6);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:67:6: ( arguments[instructionStream] )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==FUNCTION_ARGUMENTS))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:67:6: arguments[instructionStream]
				{
				DebugLocation(67, 6);
				PushFollow(Follow._arguments_in_functionCall251);
				arguments(instructionStream);
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(67, 37);

						Value retAddr = new LiteralValue(instructionStream.Count + 2);
						instructionStream.Add( new PushInstruction(retAddr) );
						instructionStream.Add( new CallInstruction(new LiteralValue(funcDef.StartAddress)) );
						instructionStream.Add( new PopFrameInstruction() );
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionCall", 8);
			LeaveRule("functionCall", 8);
			LeaveRule_functionCall();
		}
		DebugLocation(73, 1);
		} finally { DebugExitRule(GrammarFileName, "functionCall"); }
		return;

	}
	// $ANTLR end "functionCall"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:75:1: arguments[List<Instruction> instructionStream] : ^( FUNCTION_ARGUMENTS ( argument[instructionStream] )+ ) ;
	[GrammarRule("arguments")]
	private void arguments(List<Instruction> instructionStream)
	{
		EnterRule_arguments();
		EnterRule("arguments", 9);
		TraceIn("arguments", 9);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(75, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:76:2: ( ^( FUNCTION_ARGUMENTS ( argument[instructionStream] )+ ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:76:4: ^( FUNCTION_ARGUMENTS ( argument[instructionStream] )+ )
			{
			DebugLocation(76, 4);
			DebugLocation(76, 6);
			Match(input,FUNCTION_ARGUMENTS,Follow._FUNCTION_ARGUMENTS_in_arguments271); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(76, 25);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:76:25: ( argument[instructionStream] )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==FUNCTION_ARGUMENT))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:76:26: argument[instructionStream]
					{
					DebugLocation(76, 26);
					PushFollow(Follow._argument_in_arguments274);
					argument(instructionStream);
					PopFollow();


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 9);
			LeaveRule("arguments", 9);
			LeaveRule_arguments();
		}
		DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_argument();
	partial void LeaveRule_argument();
	// $ANTLR start "argument"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:79:1: argument[List<Instruction> instructionStream] : ^( FUNCTION_ARGUMENT v= value[instructionStream] ) ;
	[GrammarRule("argument")]
	private void argument(List<Instruction> instructionStream)
	{
		EnterRule_argument();
		EnterRule("argument", 10);
		TraceIn("argument", 10);
		Value v = default(Value);

		try { DebugEnterRule(GrammarFileName, "argument");
		DebugLocation(79, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:80:2: ( ^( FUNCTION_ARGUMENT v= value[instructionStream] ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:80:4: ^( FUNCTION_ARGUMENT v= value[instructionStream] )
			{
			DebugLocation(80, 4);
			DebugLocation(80, 6);
			Match(input,FUNCTION_ARGUMENT,Follow._FUNCTION_ARGUMENT_in_argument293); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(80, 25);
			PushFollow(Follow._value_in_argument297);
			v=value(instructionStream);
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(80, 52);

					instructionStream.Add( new PushInstruction(v) );
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("argument", 10);
			LeaveRule("argument", 10);
			LeaveRule_argument();
		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "argument"); }
		return;

	}
	// $ANTLR end "argument"

	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:87:1: program : ^( PROGRAM ( statement[memory, CPU.Instance.InstructionStream] )+ ) ;
	[GrammarRule("program")]
	private void program()
	{
		EnterRule_program();
		EnterRule("program", 11);
		TraceIn("program", 11);

			IMemoryDecorator memory = new MemoryDecorator_HeapInterface();

		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(87, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:91:2: ( ^( PROGRAM ( statement[memory, CPU.Instance.InstructionStream] )+ ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:91:4: ^( PROGRAM ( statement[memory, CPU.Instance.InstructionStream] )+ )
			{
			DebugLocation(91, 4);
			DebugLocation(91, 6);
			Match(input,PROGRAM,Follow._PROGRAM_in_program320); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(91, 14);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:91:14: ( statement[memory, CPU.Instance.InstructionStream] )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==ASSIGNMENT||LA11_1==DECLARATION||LA11_1==FUNCTION_CALL))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:91:15: statement[memory, CPU.Instance.InstructionStream]
					{
					DebugLocation(91, 15);
					PushFollow(Follow._statement_in_program323);
					statement(memory, CPU.Instance.InstructionStream);
					PopFollow();


					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(91, 68);

					CPU.Instance.InstructionStream.Add( new EndofProgramInstruction() );
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("program", 11);
			LeaveRule("program", 11);
			LeaveRule_program();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return;

	}
	// $ANTLR end "program"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:96:1: statement[IMemoryDecorator memory, List<Instruction> instructionStream] : ( declaration[memory] | assignment[instructionStream] | functionCall[instructionStream] );
	[GrammarRule("statement")]
	private void statement(IMemoryDecorator memory, List<Instruction> instructionStream)
	{
		EnterRule_statement();
		EnterRule("statement", 12);
		TraceIn("statement", 12);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(96, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:97:2: ( declaration[memory] | assignment[instructionStream] | functionCall[instructionStream] )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case DECLARATION:
				{
				alt12 = 1;
				}
				break;
			case ASSIGNMENT:
				{
				alt12 = 2;
				}
				break;
			case FUNCTION_CALL:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:97:4: declaration[memory]
				{
				DebugLocation(97, 4);
				PushFollow(Follow._declaration_in_statement343);
				declaration(memory);
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:98:4: assignment[instructionStream]
				{
				DebugLocation(98, 4);
				PushFollow(Follow._assignment_in_statement349);
				assignment(instructionStream);
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:99:4: functionCall[instructionStream]
				{
				DebugLocation(99, 4);
				PushFollow(Follow._functionCall_in_statement355);
				functionCall(instructionStream);
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 12);
			LeaveRule("statement", 12);
			LeaveRule_statement();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();
	// $ANTLR start "declaration"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:102:1: declaration[IMemoryDecorator memory] : ^( DECLARATION t= ID v= ID ) ;
	[GrammarRule("declaration")]
	private void declaration(IMemoryDecorator memory)
	{
		EnterRule_declaration();
		EnterRule("declaration", 13);
		TraceIn("declaration", 13);
		CommonTree t = default(CommonTree);
		CommonTree v = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(102, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:103:2: ( ^( DECLARATION t= ID v= ID ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:103:4: ^( DECLARATION t= ID v= ID )
			{
			DebugLocation(103, 4);
			DebugLocation(103, 6);
			Match(input,DECLARATION,Follow._DECLARATION_in_declaration370); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(103, 19);
			t=(CommonTree)Match(input,ID,Follow._ID_in_declaration374); 
			DebugLocation(103, 24);
			v=(CommonTree)Match(input,ID,Follow._ID_in_declaration378); 

			Match(input, TokenTypes.Up, null); 

			DebugLocation(103, 29);

					memory.AllocateStorage( (v!=null?v.Text:default(string)), (t!=null?t.Text:default(string)) );
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declaration", 13);
			LeaveRule("declaration", 13);
			LeaveRule_declaration();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:108:1: assignment[List<Instruction> instructionStream] : ^( ASSIGNMENT v= ID exp= addSubExp[instructionStream] ) ;
	[GrammarRule("assignment")]
	private void assignment(List<Instruction> instructionStream)
	{
		EnterRule_assignment();
		EnterRule("assignment", 14);
		TraceIn("assignment", 14);
		CommonTree v = default(CommonTree);
		Value exp = default(Value);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(108, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:109:2: ( ^( ASSIGNMENT v= ID exp= addSubExp[instructionStream] ) )
			DebugEnterAlt(1);
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:109:4: ^( ASSIGNMENT v= ID exp= addSubExp[instructionStream] )
			{
			DebugLocation(109, 4);
			DebugLocation(109, 6);
			Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_assignment396); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(109, 18);
			v=(CommonTree)Match(input,ID,Follow._ID_in_assignment400); 
			DebugLocation(109, 25);
			PushFollow(Follow._addSubExp_in_assignment404);
			exp=addSubExp(instructionStream);
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(109, 56);

					Value var = ProgramDef.Instance.SymbolTable[(v!=null?v.Text:default(string))];
					instructionStream.Add( new CopyInstruction(var, exp) );
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignment", 14);
			LeaveRule("assignment", 14);
			LeaveRule_assignment();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_addSubExp();
	partial void LeaveRule_addSubExp();
	// $ANTLR start "addSubExp"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:115:1: addSubExp[List<Instruction> instructionStream] returns [Value ret] : (exp= mulDivExp[instructionStream] | ^( '+' lhs= mulDivExp[instructionStream] rhs= mulDivExp[instructionStream] ) | ^( '-' lhs= mulDivExp[instructionStream] rhs= mulDivExp[instructionStream] ) );
	[GrammarRule("addSubExp")]
	private Value addSubExp(List<Instruction> instructionStream)
	{
		EnterRule_addSubExp();
		EnterRule("addSubExp", 15);
		TraceIn("addSubExp", 15);
		Value ret = default(Value);


		Value exp = default(Value);
		Value lhs = default(Value);
		Value rhs = default(Value);

		try { DebugEnterRule(GrammarFileName, "addSubExp");
		DebugLocation(115, 3);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:116:2: (exp= mulDivExp[instructionStream] | ^( '+' lhs= mulDivExp[instructionStream] rhs= mulDivExp[instructionStream] ) | ^( '-' lhs= mulDivExp[instructionStream] rhs= mulDivExp[instructionStream] ) )
			int alt13=3;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case LITERAL:
			case PARENEXP:
			case UNARY:
			case VARIABLE:
			case 30:
			case 34:
				{
				alt13 = 1;
				}
				break;
			case 31:
				{
				alt13 = 2;
				}
				break;
			case 33:
				{
				alt13 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:116:5: exp= mulDivExp[instructionStream]
				{
				DebugLocation(116, 8);
				PushFollow(Follow._mulDivExp_in_addSubExp428);
				exp=mulDivExp(instructionStream);
				PopFollow();

				DebugLocation(116, 38);

						ret = exp;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:119:7: ^( '+' lhs= mulDivExp[instructionStream] rhs= mulDivExp[instructionStream] )
				{
				DebugLocation(119, 7);
				DebugLocation(119, 9);
				Match(input,31,Follow._31_in_addSubExp440); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(119, 16);
				PushFollow(Follow._mulDivExp_in_addSubExp444);
				lhs=mulDivExp(instructionStream);
				PopFollow();

				DebugLocation(119, 49);
				PushFollow(Follow._mulDivExp_in_addSubExp449);
				rhs=mulDivExp(instructionStream);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(119, 80);

				  		instructionStream.Add( new AddInstruction(lhs, rhs, ret) );
				  	

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:122:7: ^( '-' lhs= mulDivExp[instructionStream] rhs= mulDivExp[instructionStream] )
				{
				DebugLocation(122, 7);
				DebugLocation(122, 9);
				Match(input,33,Follow._33_in_addSubExp462); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(122, 16);
				PushFollow(Follow._mulDivExp_in_addSubExp466);
				lhs=mulDivExp(instructionStream);
				PopFollow();

				DebugLocation(122, 49);
				PushFollow(Follow._mulDivExp_in_addSubExp471);
				rhs=mulDivExp(instructionStream);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(122, 80);

				  		instructionStream.Add( new SubtractInstruction(lhs, rhs, ret) );
				  	

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addSubExp", 15);
			LeaveRule("addSubExp", 15);
			LeaveRule_addSubExp();
		}
		DebugLocation(125, 3);
		} finally { DebugExitRule(GrammarFileName, "addSubExp"); }
		return ret;

	}
	// $ANTLR end "addSubExp"

	partial void EnterRule_mulDivExp();
	partial void LeaveRule_mulDivExp();
	// $ANTLR start "mulDivExp"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:127:1: mulDivExp[List<Instruction> instructionStream] returns [Value ret] : (val= unaryExp[instructionStream] | ^( '*' lhs= unaryExp[instructionStream] rhs= unaryExp[instructionStream] ) | ^( '/' lhs= unaryExp[instructionStream] rhs= unaryExp[instructionStream] ) );
	[GrammarRule("mulDivExp")]
	private Value mulDivExp(List<Instruction> instructionStream)
	{
		EnterRule_mulDivExp();
		EnterRule("mulDivExp", 16);
		TraceIn("mulDivExp", 16);
		Value ret = default(Value);


		Value val = default(Value);
		Value lhs = default(Value);
		Value rhs = default(Value);

		try { DebugEnterRule(GrammarFileName, "mulDivExp");
		DebugLocation(127, 3);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:128:2: (val= unaryExp[instructionStream] | ^( '*' lhs= unaryExp[instructionStream] rhs= unaryExp[instructionStream] ) | ^( '/' lhs= unaryExp[instructionStream] rhs= unaryExp[instructionStream] ) )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case LITERAL:
			case PARENEXP:
			case UNARY:
			case VARIABLE:
				{
				alt14 = 1;
				}
				break;
			case 30:
				{
				alt14 = 2;
				}
				break;
			case 34:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:128:5: val= unaryExp[instructionStream]
				{
				DebugLocation(128, 8);
				PushFollow(Follow._unaryExp_in_mulDivExp496);
				val=unaryExp(instructionStream);
				PopFollow();

				DebugLocation(128, 37);

						ret = val;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:131:7: ^( '*' lhs= unaryExp[instructionStream] rhs= unaryExp[instructionStream] )
				{
				DebugLocation(131, 7);
				DebugLocation(131, 9);
				Match(input,30,Follow._30_in_mulDivExp508); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(131, 16);
				PushFollow(Follow._unaryExp_in_mulDivExp512);
				lhs=unaryExp(instructionStream);
				PopFollow();

				DebugLocation(131, 48);
				PushFollow(Follow._unaryExp_in_mulDivExp517);
				rhs=unaryExp(instructionStream);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(131, 78);

				  		instructionStream.Add( new MultiplyInstruction(lhs, rhs, ret) );
				  	

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:134:6: ^( '/' lhs= unaryExp[instructionStream] rhs= unaryExp[instructionStream] )
				{
				DebugLocation(134, 6);
				DebugLocation(134, 8);
				Match(input,34,Follow._34_in_mulDivExp529); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(134, 15);
				PushFollow(Follow._unaryExp_in_mulDivExp533);
				lhs=unaryExp(instructionStream);
				PopFollow();

				DebugLocation(134, 47);
				PushFollow(Follow._unaryExp_in_mulDivExp538);
				rhs=unaryExp(instructionStream);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(134, 77);

				 		instructionStream.Add( new DivideInstruction(lhs, rhs, ret) );
				 	

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("mulDivExp", 16);
			LeaveRule("mulDivExp", 16);
			LeaveRule_mulDivExp();
		}
		DebugLocation(137, 3);
		} finally { DebugExitRule(GrammarFileName, "mulDivExp"); }
		return ret;

	}
	// $ANTLR end "mulDivExp"

	partial void EnterRule_unaryExp();
	partial void LeaveRule_unaryExp();
	// $ANTLR start "unaryExp"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:139:1: unaryExp[List<Instruction> instructionStream] returns [Value ret] : ( ^( UNARY v= value[instructionStream] ) |v= value[instructionStream] );
	[GrammarRule("unaryExp")]
	private Value unaryExp(List<Instruction> instructionStream)
	{
		EnterRule_unaryExp();
		EnterRule("unaryExp", 17);
		TraceIn("unaryExp", 17);
		Value ret = default(Value);


		Value v = default(Value);

		try { DebugEnterRule(GrammarFileName, "unaryExp");
		DebugLocation(139, 3);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:140:4: ( ^( UNARY v= value[instructionStream] ) |v= value[instructionStream] )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==UNARY))
			{
				alt15 = 1;
			}
			else if ((LA15_1==LITERAL||LA15_1==PARENEXP||LA15_1==VARIABLE))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:140:7: ^( UNARY v= value[instructionStream] )
				{
				DebugLocation(140, 7);
				DebugLocation(140, 9);
				Match(input,UNARY,Follow._UNARY_in_unaryExp565); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(140, 16);
				PushFollow(Follow._value_in_unaryExp569);
				v=value(instructionStream);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(140, 43);

				  		if( v.ValueType == typeof(int) ) {
					  		instructionStream.Add( new SubtractInstruction(Value.IntZero, v, ret) );
					  	} else if( v.ValueType == typeof(float) ) {
					  		instructionStream.Add( new SubtractInstruction(Value.FloatZero, v, ret) );
					  	} else {
					  		// Throw invalid type exception
					  	}
				  	

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:149:5: v= value[instructionStream]
				{
				DebugLocation(149, 6);
				PushFollow(Follow._value_in_unaryExp581);
				v=value(instructionStream);
				PopFollow();

				DebugLocation(149, 32);

						ret = v;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExp", 17);
			LeaveRule("unaryExp", 17);
			LeaveRule_unaryExp();
		}
		DebugLocation(152, 3);
		} finally { DebugExitRule(GrammarFileName, "unaryExp"); }
		return ret;

	}
	// $ANTLR end "unaryExp"

	partial void EnterRule_value();
	partial void LeaveRule_value();
	// $ANTLR start "value"
	// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:154:1: value[List<Instruction> instructionStream] returns [Value ret] : ( ^( VARIABLE v= ID ) | ^( LITERAL TYPE_INT i= INT ) | ^( LITERAL TYPE_FLOAT f= FLOAT ) | ^( PARENEXP e= addSubExp[instructionStream] ) );
	[GrammarRule("value")]
	private Value value(List<Instruction> instructionStream)
	{
		EnterRule_value();
		EnterRule("value", 18);
		TraceIn("value", 18);
		Value ret = default(Value);


		CommonTree v = default(CommonTree);
		CommonTree i = default(CommonTree);
		CommonTree f = default(CommonTree);
		Value e = default(Value);

		try { DebugEnterRule(GrammarFileName, "value");
		DebugLocation(154, 1);
		try
		{
			// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:155:2: ( ^( VARIABLE v= ID ) | ^( LITERAL TYPE_INT i= INT ) | ^( LITERAL TYPE_FLOAT f= FLOAT ) | ^( PARENEXP e= addSubExp[instructionStream] ) )
			int alt16=4;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case VARIABLE:
				{
				alt16 = 1;
				}
				break;
			case LITERAL:
				{
				int LA16_2 = input.LA(2);

				if ((LA16_2==DOWN))
				{
					int LA16_3 = input.LA(3);

					if ((LA16_3==TYPE_INT))
					{
						alt16 = 2;
					}
					else if ((LA16_3==TYPE_FLOAT))
					{
						alt16 = 3;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 16, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PARENEXP:
				{
				alt16 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:155:4: ^( VARIABLE v= ID )
				{
				DebugLocation(155, 4);
				DebugLocation(155, 6);
				Match(input,VARIABLE,Follow._VARIABLE_in_value606); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(155, 16);
				v=(CommonTree)Match(input,ID,Follow._ID_in_value610); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(155, 21);

						try {
							ret = ProgramDef.Instance.SymbolTable[(v!=null?v.Text:default(string))];
						} catch( KeyNotFoundException ex ) {
							Console.Write( string.Format("Symbol {0} wasn't declared before use", (v!=null?v.Text:default(string))) );
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:162:4: ^( LITERAL TYPE_INT i= INT )
				{
				DebugLocation(162, 4);
				DebugLocation(162, 6);
				Match(input,LITERAL,Follow._LITERAL_in_value619); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(162, 14);
				Match(input,TYPE_INT,Follow._TYPE_INT_in_value621); 
				DebugLocation(162, 24);
				i=(CommonTree)Match(input,INT,Follow._INT_in_value625); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(162, 30);

						ret = new LiteralValue(int.Parse((i!=null?i.Text:default(string))));
						
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:166:4: ^( LITERAL TYPE_FLOAT f= FLOAT )
				{
				DebugLocation(166, 4);
				DebugLocation(166, 6);
				Match(input,LITERAL,Follow._LITERAL_in_value634); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(166, 14);
				Match(input,TYPE_FLOAT,Follow._TYPE_FLOAT_in_value636); 
				DebugLocation(166, 26);
				f=(CommonTree)Match(input,FLOAT,Follow._FLOAT_in_value640); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(166, 34);
				 
						ret = new LiteralValue(float.Parse((f!=null?f.Text:default(string))));
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Repos\\NeoInterpreter\\NeoCompiler\\NeoTreePass2.g:169:4: ^( PARENEXP e= addSubExp[instructionStream] )
				{
				DebugLocation(169, 4);
				DebugLocation(169, 6);
				Match(input,PARENEXP,Follow._PARENEXP_in_value649); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(169, 16);
				PushFollow(Follow._addSubExp_in_value653);
				e=addSubExp(instructionStream);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(169, 47);

						ret = e;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("value", 18);
			LeaveRule("value", 18);
			LeaveRule_value();
		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "value"); }
		return ret;

	}
	// $ANTLR end "value"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _FILE_in_file54 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _script_in_file56 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _SCRIPT_in_script70 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _functionDefs_in_script72 = new BitSet(new ulong[]{0x0000000000200008UL});
		public static readonly BitSet _program_in_script75 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _SCRIPT_in_script86 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _program_in_script88 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _FUNCTION_DEFS_in_functionDefs104 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _functionDef_in_functionDefs106 = new BitSet(new ulong[]{0x0000000000002008UL});
		public static readonly BitSet _FUNCTION_DEF_in_functionDef131 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_functionDef135 = new BitSet(new ulong[]{0x0000000000080808UL});
		public static readonly BitSet _parameters_in_functionDef140 = new BitSet(new ulong[]{0x0000000000000808UL});
		public static readonly BitSet _body_in_functionDef148 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _FUNCTION_BODY_in_body166 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _statement_in_body169 = new BitSet(new ulong[]{0x0000000000001058UL});
		public static readonly BitSet _PARAMS_in_parameters188 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _param_in_parameters191 = new BitSet(new ulong[]{0x0000000000040008UL});
		public static readonly BitSet _PARAM_in_param210 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_param214 = new BitSet(new ulong[]{0x0000000000008000UL});
		public static readonly BitSet _ID_in_param218 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _FUNCTION_CALL_in_functionCall243 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_functionCall247 = new BitSet(new ulong[]{0x0000000000000408UL});
		public static readonly BitSet _arguments_in_functionCall251 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _FUNCTION_ARGUMENTS_in_arguments271 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _argument_in_arguments274 = new BitSet(new ulong[]{0x0000000000000208UL});
		public static readonly BitSet _FUNCTION_ARGUMENT_in_argument293 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _value_in_argument297 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _PROGRAM_in_program320 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _statement_in_program323 = new BitSet(new ulong[]{0x0000000000001058UL});
		public static readonly BitSet _declaration_in_statement343 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _assignment_in_statement349 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _functionCall_in_statement355 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _DECLARATION_in_declaration370 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_declaration374 = new BitSet(new ulong[]{0x0000000000008000UL});
		public static readonly BitSet _ID_in_declaration378 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _ASSIGNMENT_in_assignment396 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_assignment400 = new BitSet(new ulong[]{0x00000006C6120000UL});
		public static readonly BitSet _addSubExp_in_assignment404 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _mulDivExp_in_addSubExp428 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _31_in_addSubExp440 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _mulDivExp_in_addSubExp444 = new BitSet(new ulong[]{0x0000000446120000UL});
		public static readonly BitSet _mulDivExp_in_addSubExp449 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _33_in_addSubExp462 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _mulDivExp_in_addSubExp466 = new BitSet(new ulong[]{0x0000000446120000UL});
		public static readonly BitSet _mulDivExp_in_addSubExp471 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _unaryExp_in_mulDivExp496 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _30_in_mulDivExp508 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _unaryExp_in_mulDivExp512 = new BitSet(new ulong[]{0x0000000006120000UL});
		public static readonly BitSet _unaryExp_in_mulDivExp517 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _34_in_mulDivExp529 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _unaryExp_in_mulDivExp533 = new BitSet(new ulong[]{0x0000000006120000UL});
		public static readonly BitSet _unaryExp_in_mulDivExp538 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _UNARY_in_unaryExp565 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _value_in_unaryExp569 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _value_in_unaryExp581 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _VARIABLE_in_value606 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_value610 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _LITERAL_in_value619 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _TYPE_INT_in_value621 = new BitSet(new ulong[]{0x0000010000000000UL});
		public static readonly BitSet _INT_in_value625 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _LITERAL_in_value634 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _TYPE_FLOAT_in_value636 = new BitSet(new ulong[]{0x0000008000000000UL});
		public static readonly BitSet _FLOAT_in_value640 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _PARENEXP_in_value649 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _addSubExp_in_value653 = new BitSet(new ulong[]{0x0000000000000008UL});
	}
	#endregion Follow sets
}
